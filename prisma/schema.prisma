// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TypeRent {
  id          String    @id @default(cuid())
  name        String
  description String
  products    Product[]
}

model Equipment {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Services {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Meals {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model TypeRoom {
  id          String    @id @default(cuid())
  name        String
  description String
  products    Product[]
}

model Security {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Product {
  id               String            @id @default(cuid())
  name             String
  description      String
  address          String
  longitude        Float
  latitude         Float
  basePrice        String
  room             BigInt?
  bathroom         BigInt?
  sizeRoom         Int?
  arriving         BigInt
  leaving          BigInt
  autoAccept       Boolean
  equipement       BigInt?
  meal             BigInt?
  services         BigInt?
  security         BigInt?
  minRent          BigInt?
  maxRent          BigInt?
  advanceRent      BigInt?
  delayTime        BigInt?
  phone            String
  categories       BigInt
  minPeople        BigInt?
  maxPeople        BigInt?
  img              Images[]
  validate         Boolean
  userManager      BigInt
  typeId           String
  type             TypeRent          @relation(fields: [typeId], references: [id])
  equipments       Equipment[]
  servicesList     Services[]
  mealsList        Meals[]
  typeRoom         TypeRoom[]
  securities       Security[]
  options          Options[]
  rents            Rent[]
  specificRequests SpecificRequest[]
  specificPrices   SpecificPrices[]
  reviews          Review[]
}

model Images {
  id      String    @id @default(cuid())
  img     String
  Product Product[]
}

model SpecificPrices {
  id        String  @id @default(cuid())
  productId String
  day       BigInt
  price     BigInt
  active    BigInt
  product   Product @relation(fields: [productId], references: [id])
}

model SpecificRequest {
  id        String  @id @default(cuid())
  productId String
  name      String
  text      String
  product   Product @relation(fields: [productId], references: [id])
}

model Options {
  id        String  @id @default(cuid())
  productId String
  name      String
  price     BigInt
  type      BigInt
  product   Product @relation(fields: [productId], references: [id])
}

model Rent {
  id           String  @id @default(cuid())
  productId    String
  userId       BigInt
  arrivingDate BigInt
  leavingDate  BigInt
  numberPeople BigInt
  options      BigInt
  notes        BigInt
  accepted     Boolean
  prices       BigInt
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  title       String
  text        String
  grade       Int
  visitDate   DateTime
  publishDate DateTime
  product     Product  @relation(fields: [productId], references: [id])
}

model User {
  id             String          @id @default(cuid())
  name           String?
  lastname       String?
  profilePicture String?
  info           String?
  password       String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]
  roles          UserRole        @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserRole {
  ADMIN
  BLOGWRITTER
  HOST
  USER
}
