#!/usr/bin/env node

/**
 * Script de seed pour le syst√®me de retrait
 *
 * Cr√©e des donn√©es de test :
 * - R√©servations pay√©es pour simuler un solde
 * - Comptes de paiement
 * - Quelques demandes de retrait en diff√©rents statuts
 *
 * Usage: node scripts/seed-withdrawal-data.js
 */

const {
  PrismaClient,
  PaymentStatus,
  PaymentMethod,
  WithdrawalType,
  WithdrawalStatus,
} = require('@prisma/client')

const prisma = new PrismaClient()

async function main() {
  console.log('üå± D√©but du seed des donn√©es de retrait...\n')

  // 1. R√©cup√©rer un h√¥te existant (ou cr√©er un h√¥te de test)
  let host = await prisma.user.findFirst({
    where: {
      roles: {
        in: ['HOST', 'HOST_VERIFIED', 'HOST_MANAGER'],
      },
    },
  })

  if (!host) {
    console.log("‚ùå Aucun h√¥te trouv√©. Cr√©ez d'abord un utilisateur avec le r√¥le HOST.")
    return
  }

  console.log(`‚úÖ H√¥te trouv√©: ${host.name} (${host.email})`)
  console.log(`   ID: ${host.id}\n`)

  // 2. R√©cup√©rer un produit (n'importe lequel pour le test)
  const product = await prisma.product.findFirst()

  if (!product) {
    console.log('‚ùå Aucun produit valid√© trouv√©.')
    console.log("üí° Cr√©ez d'abord un produit valid√© dans l'application.")
    return
  }

  console.log(`‚úÖ Produit trouv√©: ${product.name}`)
  console.log(`   ID: ${product.id}`)
  console.log(`   Note: Les r√©servations seront cr√©√©es pour ce produit\n`)

  // 3. Cr√©er des r√©servations pay√©es pour simuler un solde
  console.log('üìù Cr√©ation de r√©servations pay√©es...')

  const reservations = []
  const baseDate = new Date('2025-01-15')

  for (let i = 0; i < 5; i++) {
    const arrivingDate = new Date(baseDate)
    arrivingDate.setDate(baseDate.getDate() + i * 10)

    const leavingDate = new Date(arrivingDate)
    leavingDate.setDate(arrivingDate.getDate() + 3)

    const price = 150 + i * 50 // 150‚Ç¨, 200‚Ç¨, 250‚Ç¨, etc.

    try {
      const rent = await prisma.rent.create({
        data: {
          productId: product.id,
          userId: host.id,
          arrivingDate,
          leavingDate,
          peopleNumber: BigInt(2),
          prices: price.toString(),
          payment: PaymentStatus.CLIENT_PAID,
          status: 'CONFIRMED',
          confirmed: true,
          arriving: 14,
          leaving: 11,
        },
      })

      reservations.push(rent)
      console.log(`   ‚úÖ R√©servation ${i + 1}: ${price}‚Ç¨ (${arrivingDate.toLocaleDateString()})`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  R√©servation ${i + 1} ignor√©e (peut-√™tre d√©j√† existante)`)
    }
  }

  const totalEarned = reservations.reduce((sum, r) => sum + parseFloat(r.prices), 0)
  console.log(`\nüí∞ Total gagn√© simul√©: ${totalEarned}‚Ç¨\n`)

  // 4. Cr√©er des comptes de paiement de test
  console.log('üìù Cr√©ation de comptes de paiement...')

  const paymentAccounts = []

  // Compte SEPA (par d√©faut)
  try {
    const sepaAccount = await prisma.paymentAccount.create({
      data: {
        userId: host.id,
        method: PaymentMethod.SEPA_VIREMENT,
        accountHolderName: host.name || 'Jean Dupont',
        iban: 'FR7630001007941234567890185',
        isDefault: true,
        isValidated: true, // Pr√©-valid√© pour les tests
        validatedAt: new Date(),
      },
    })
    paymentAccounts.push(sepaAccount)
    console.log(`   ‚úÖ Compte SEPA cr√©√© (valid√©)`)
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Compte SEPA d√©j√† existant`)
  }

  // Compte Mobile Money
  try {
    const mobileAccount = await prisma.paymentAccount.create({
      data: {
        userId: host.id,
        method: PaymentMethod.MOBILE_MONEY,
        accountHolderName: host.name || 'Jean Dupont',
        mobileNumber: '+261 32 12 345 67',
        isDefault: false,
        isValidated: false, // Non valid√© pour tester le workflow
      },
    })
    paymentAccounts.push(mobileAccount)
    console.log(`   ‚úÖ Compte Mobile Money cr√©√© (non valid√©)`)
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Compte Mobile Money d√©j√† existant`)
  }

  // Compte PayPal
  try {
    const paypalAccount = await prisma.paymentAccount.create({
      data: {
        userId: host.id,
        method: PaymentMethod.PAYPAL,
        accountHolderName: host.name || 'Jean Dupont',
        paypalEmail: host.email,
        paypalUsername: 'jean.dupont',
        paypalPhone: '+33612345678',
        isDefault: false,
        isValidated: true, // Pr√©-valid√©
        validatedAt: new Date(),
      },
    })
    paymentAccounts.push(paypalAccount)
    console.log(`   ‚úÖ Compte PayPal cr√©√© (valid√©)`)
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Compte PayPal d√©j√† existant`)
  }

  console.log('')

  // 5. Cr√©er des demandes de retrait de test avec diff√©rents statuts
  console.log('üìù Cr√©ation de demandes de retrait...')

  const validatedAccount = paymentAccounts.find(a => a.isValidated)

  if (validatedAccount) {
    // Demande PENDING
    try {
      await prisma.withdrawalRequest.create({
        data: {
          userId: host.id,
          amount: 100,
          availableBalance: totalEarned,
          withdrawalType: WithdrawalType.PARTIAL_50,
          paymentAccountId: validatedAccount.id,
          paymentMethod: validatedAccount.method,
          paymentDetails: {
            accountHolderName: validatedAccount.accountHolderName,
            iban: validatedAccount.iban,
            method: validatedAccount.method,
          },
          status: WithdrawalStatus.PENDING,
          notes: 'Demande de test - En attente',
        },
      })
      console.log(`   ‚úÖ Demande PENDING cr√©√©e (100‚Ç¨)`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Demande PENDING d√©j√† existante`)
    }

    // Demande APPROVED
    try {
      await prisma.withdrawalRequest.create({
        data: {
          userId: host.id,
          amount: 200,
          availableBalance: totalEarned,
          withdrawalType: WithdrawalType.FULL_100,
          paymentAccountId: validatedAccount.id,
          paymentMethod: validatedAccount.method,
          paymentDetails: {
            accountHolderName: validatedAccount.accountHolderName,
            iban: validatedAccount.iban,
            method: validatedAccount.method,
          },
          status: WithdrawalStatus.APPROVED,
          notes: 'Demande de test - Approuv√©e',
          adminNotes: 'Approuv√© pour test',
          processedAt: new Date(),
        },
      })
      console.log(`   ‚úÖ Demande APPROVED cr√©√©e (200‚Ç¨)`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Demande APPROVED d√©j√† existante`)
    }

    // Demande PAID
    try {
      await prisma.withdrawalRequest.create({
        data: {
          userId: host.id,
          amount: 150,
          availableBalance: totalEarned,
          withdrawalType: WithdrawalType.PARTIAL_50,
          paymentAccountId: validatedAccount.id,
          paymentMethod: validatedAccount.method,
          paymentDetails: {
            accountHolderName: validatedAccount.accountHolderName,
            iban: validatedAccount.iban,
            method: validatedAccount.method,
          },
          status: WithdrawalStatus.PAID,
          notes: 'Demande de test - Pay√©e',
          processedAt: new Date(Date.now() - 86400000), // Il y a 1 jour
          paidAt: new Date(),
        },
      })
      console.log(`   ‚úÖ Demande PAID cr√©√©e (150‚Ç¨)`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Demande PAID d√©j√† existante`)
    }
  }

  const nonValidatedAccount = paymentAccounts.find(a => !a.isValidated)

  if (nonValidatedAccount) {
    // Demande ACCOUNT_VALIDATION
    try {
      await prisma.withdrawalRequest.create({
        data: {
          userId: host.id,
          amount: 75,
          availableBalance: totalEarned,
          withdrawalType: WithdrawalType.PARTIAL_50,
          paymentAccountId: nonValidatedAccount.id,
          paymentMethod: nonValidatedAccount.method,
          paymentDetails: {
            accountHolderName: nonValidatedAccount.accountHolderName,
            mobileNumber: nonValidatedAccount.mobileNumber,
            method: nonValidatedAccount.method,
          },
          status: WithdrawalStatus.ACCOUNT_VALIDATION,
          notes: 'Demande de test - En attente de validation du compte',
        },
      })
      console.log(`   ‚úÖ Demande ACCOUNT_VALIDATION cr√©√©e (75‚Ç¨)`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Demande ACCOUNT_VALIDATION d√©j√† existante`)
    }
  }

  console.log('\n‚ú® Seed termin√© avec succ√®s!\n')
  console.log('üìä R√©sum√©:')
  console.log(`   - H√¥te: ${host.name} (${host.email})`)
  console.log(`   - R√©servations pay√©es: ${reservations.length}`)
  console.log(`   - Montant total gagn√©: ${totalEarned}‚Ç¨`)
  console.log(`   - Comptes de paiement: ${paymentAccounts.length}`)
  console.log(`   - Demandes de retrait: 4 (diff√©rents statuts)`)
  console.log('\nüîó Pour tester:')
  console.log(`   1. Connectez-vous en tant que ${host.email}`)
  console.log(`   2. Allez sur: http://localhost:3000/dashboard/host/withdrawals`)
  console.log(`   3. Vous verrez votre solde et vos demandes de retrait\n`)
}

main()
  .catch(e => {
    console.error('‚ùå Erreur:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
